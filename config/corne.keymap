/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        td_slash: td_slash {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SLASH";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp LS(FSLH)>;
        };

        td_period: td_period {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_PERIOD";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp LS(PERIOD)>;
        };

        td_comma: td_comma {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_COMMA";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp LS(COMMA)>;
        };

        td_semi: td_semi {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SEMI";
            #binding-cells = <0>;
            bindings = <&kp SEMI>, <&kp LS(SEMI)>;
        };

        td_quot: td_quot {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_QUOT";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE>, <&kp LS(SINGLE_QUOTE)>;
        };

        td_lpar: td_lpar {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LPAR";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_PARENTHESIS>,
                <&kp LEFT_BRACKET>,
                <&kp LEFT_BRACE>;
        };

        td_rpar: td_rpar {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_RPAR";
            #binding-cells = <0>;
            bindings =
                <&kp RIGHT_PARENTHESIS>,
                <&kp RIGHT_BRACKET>,
                <&kp RIGHT_BRACE>;
        };

        td_tab_capsword: td_tab_capsword {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_TAB_CAPSWORD";
            #binding-cells = <0>;
            bindings = <&kp TAB>, <&caps_word>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESC           &kp Q  &kp W  &kp E      &kp R     &kp T          &kp Y        &kp U     &kp I      &kp O       &kp P      &kp BSPC
&td_tab_capsword  &kp A  &kp S  &kp D      &kp F     &kp G          &kp H        &kp J     &kp K      &kp L       &td_semi   &td_quot
&sk LSHFT         &kp Z  &kp X  &kp C      &kp V     &kp B          &kp N        &kp M     &td_comma  &td_period  &td_slash  &sk LSHFT
                                &sk LCTRL  &sk LGUI  &lt 4 ENTER    &lt 2 SPACE  &sk LALT  &kp K_APP
            >;
        };

        tri_layer {
            bindings = <
&kp TILDE   &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS    &kp STAR      &td_lpar    &td_rpar    &trans
&caps_word  &trans    &trans  &trans    &trans    &trans       &trans     &trans      &trans        &trans      &trans      &trans
&trans      &trans    &trans  &trans    &trans    &trans       &bl BL_ON  &bl BL_OFF  &bl BL_CYCLE  &bl BL_INC  &bl BL_DEC  &trans
                              &trans    &trans    &trans       &trans     &trans      &trans
            >;
        };

        num_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE   &kp N1  &kp N2  &kp N3  &kp N4    &kp N5           &kp N6     &kp N7  &kp N8  &kp N9  &kp N0     &kp DEL
&caps_word  &trans  &trans  &trans  &kp PIPE  &kp BACKSLASH    &kp PLUS   &kp N4  &kp N5  &kp N6  &kp EQUAL  &kp INS
&trans      &mo 6   &trans  &trans  &trans    &kp UNDER        &kp MINUS  &kp N1  &kp N2  &kp N3  &trans     &trans
                            &trans  &trans    &trans           &trans     &trans  &sl 4
            >;
        };

        move_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none   &none   &none           &msc SCRL_UP    &none            &none     &kp HOME  &none           &kp UP    &none      &kp PAGE_UP    &trans
&trans  &none   &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT  &none     &kp END   &kp LEFT_ARROW  &kp DOWN  &kp RIGHT  &kp PAGE_DOWN  &trans
&trans  &trans  &trans          &trans          &trans           &trans    &trans    &trans          &trans    &trans     &trans         &trans
                                &trans          &trans           &trans    &trans    &trans          &trans
            >;
        };

        func_layer {
            bindings = <
&none  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5    &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &none
&none  &none   &none   &none   &none   &none     &none   &kp F4  &kp F5  &kp F6  &none    &none
&none  &none   &none   &none   &none   &none     &none   &kp F1  &kp F2  &kp F3  &none    &none
                       &trans  &trans  &trans    &trans  &trans  &sl 5
            >;
        };

        func2_layer {
            bindings = <
&none  &kp F11  &kp F12  &kp F13  &kp F14  &kp F15    &kp F16  &kp F17  &kp F18  &kp F19  &kp F20  &none
&none  &kp F21  &kp F22  &kp F23  &kp F24  &none      &kp F21  &kp F22  &kp F23  &kp F24  &none    &none
&none  &none    &none    &none    &none    &none      &none    &none    &none    &none    &none    &none
                         &trans   &trans   &trans     &trans   &trans   &trans
            >;
        };

        keypad_layer {
            bindings = <
&none      &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_N4     &kp KP_N5      &kp KP_N6     &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_N0     &kp BSPC
&none      &none      &none      &none      &kp KP_LPAR   &kp KP_RPAR    &kp KP_PLUS   &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_EQUAL  &none
&kp LSHFT  &none      &none      &none      &kp KP_COMMA  &kp KP_DOT     &kp KP_MINUS  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_SLASH  &kp RSHFT
                                 &trans     &trans        &trans         &trans        &trans     &trans
            >;
        };

        layer_7 {
            bindings = <
&bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bootloader  &trans  &trans  &trans  &trans  &sys_reset
&trans        &trans        &trans        &trans        &trans        &trans          &trans       &trans  &trans  &trans  &trans  &trans
&bl BL_CYCLE  &bl BL_INC    &bl BL_DEC    &trans        &trans        &bl BL_ON       &bl BL_OFF   &trans  &trans  &trans  &trans  &soft_off
                                          &trans        &trans        &trans          &trans       &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <4 2>;
            then-layer = <8>;
        };
    };
};
